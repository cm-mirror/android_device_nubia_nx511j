From e4cfc52a5ec070a89818748cf91c387c9ce41e1c Mon Sep 17 00:00:00 2001
From: Park Ju Hyung <qkrwngud825@gmail.com>
Date: Wed, 2 Dec 2015 23:59:07 +0900
Subject: [PATCH] art: force optimizing compiler and optimize everything
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This is be–all and end–all optimization of the Android M.

This will give a huge performance boost at a cost of noticeably slower
dexopt process, which I don't care.

Change-Id: I6d2c3943c9b40a8394c856875ab105ac36a75b07
Signed-off-by: Park Ju Hyung <qkrwngud825@gmail.com>
---
 build/Android.common_build.mk |  4 +--
 build/Android.oat.mk          | 60 ++++++-------------------------------------
 dex2oat/dex2oat.cc            | 31 +++-------------------
 test/Android.run-test.mk      |  8 +++---
 4 files changed, 16 insertions(+), 87 deletions(-)

diff --git a/build/Android.common_build.mk b/build/Android.common_build.mk
index 169a651..8fd4eb8 100644
--- a/build/Android.common_build.mk
+++ b/build/Android.common_build.mk
@@ -212,9 +212,7 @@ else
   art_cflags += -DIMT_SIZE=64
 endif
 
-ifeq ($(ART_USE_OPTIMIZING_COMPILER),true)
-  art_cflags += -DART_USE_OPTIMIZING_COMPILER=1
-endif
+art_cflags += -DART_USE_OPTIMIZING_COMPILER=1
 
 ifeq ($(ART_HEAP_POISONING),true)
   art_cflags += -DART_HEAP_POISONING=1
diff --git a/build/Android.oat.mk b/build/Android.oat.mk
index 728469c..504c41f 100644
--- a/build/Android.oat.mk
+++ b/build/Android.oat.mk
@@ -48,29 +48,11 @@ define create-core-oat-host-rules
 
   # With the optimizing compiler, we want to rerun dex2oat whenever there is
   # a dex2oat change to catch regressions early.
-  ifeq ($(ART_USE_OPTIMIZING_COMPILER), true)
-    core_dex2oat_dependency := $(DEX2OAT)
-  endif
+  core_dex2oat_dependency := $(DEX2OAT)
 
-  ifeq ($(1),default)
-    core_compile_options += --compiler-backend=Quick
-  endif
-  ifeq ($(1),optimizing)
-    core_compile_options += --compiler-backend=Optimizing
-    core_dex2oat_dependency := $(DEX2OAT)
-    core_infix := -optimizing
-  endif
-  ifeq ($(1),interpreter)
-    core_compile_options += --compiler-filter=interpret-only
-    core_infix := -interpreter
-  endif
-  ifeq ($(1),default)
-    # Default has no infix, no compile options.
-  endif
-  ifneq ($(filter-out default interpreter jit optimizing,$(1)),)
-    #Technically this test is not precise, but hopefully good enough.
-    $$(error found $(1) expected default, interpreter, jit or optimizing)
-  endif
+  core_compile_options += --compiler-backend=Optimizing
+  core_dex2oat_dependency := $(DEX2OAT)
+  core_infix := -optimizing
 
   ifeq ($(2),pic)
     core_compile_options += --compile-pic
@@ -140,15 +122,11 @@ define create-core-oat-host-rule-combination
   endif
 endef
 
-$(eval $(call create-core-oat-host-rule-combination,default,,))
 $(eval $(call create-core-oat-host-rule-combination,optimizing,,))
-$(eval $(call create-core-oat-host-rule-combination,interpreter,,))
 
 valgrindHOST_CORE_IMG_OUTS :=
 valgrindHOST_CORE_OAT_OUTS :=
-$(eval $(call create-core-oat-host-rule-combination,default,valgrind,32))
 $(eval $(call create-core-oat-host-rule-combination,optimizing,valgrind,32))
-$(eval $(call create-core-oat-host-rule-combination,interpreter,valgrind,32))
 
 valgrind-test-art-host-dex2oat-host: $(valgrindHOST_CORE_IMG_OUTS)
 
@@ -162,29 +140,11 @@ define create-core-oat-target-rules
 
   # With the optimizing compiler, we want to rerun dex2oat whenever there is
   # a dex2oat change to catch regressions early.
-  ifeq ($(ART_USE_OPTIMIZING_COMPILER), true)
-    core_dex2oat_dependency := $(DEX2OAT)
-  endif
+  core_dex2oat_dependency := $(DEX2OAT)
 
-  ifeq ($(1),default)
-    core_compile_options += --compiler-backend=Quick
-  endif
-  ifeq ($(1),optimizing)
-    core_compile_options += --compiler-backend=Optimizing
-    core_dex2oat_dependency := $(DEX2OAT)
-    core_infix := -optimizing
-  endif
-  ifeq ($(1),interpreter)
-    core_compile_options += --compiler-filter=interpret-only
-    core_infix := -interpreter
-  endif
-  ifeq ($(1),default)
-    # Default has no infix, no compile options.
-  endif
-  ifneq ($(filter-out default interpreter jit optimizing,$(1)),)
-    # Technically this test is not precise, but hopefully good enough.
-    $$(error found $(1) expected default, interpreter, jit or optimizing)
-  endif
+  core_compile_options += --compiler-backend=Optimizing
+  core_dex2oat_dependency := $(DEX2OAT)
+  core_infix := -optimizing
 
   ifeq ($(2),pic)
     core_compile_options += --compile-pic
@@ -259,15 +219,11 @@ define create-core-oat-target-rule-combination
   endif
 endef
 
-$(eval $(call create-core-oat-target-rule-combination,default,,))
 $(eval $(call create-core-oat-target-rule-combination,optimizing,,))
-$(eval $(call create-core-oat-target-rule-combination,interpreter,,))
 
 valgrindTARGET_CORE_IMG_OUTS :=
 valgrindTARGET_CORE_OAT_OUTS :=
-$(eval $(call create-core-oat-target-rule-combination,default,valgrind,32))
 $(eval $(call create-core-oat-target-rule-combination,optimizing,valgrind,32))
-$(eval $(call create-core-oat-target-rule-combination,interpreter,valgrind,32))
 
 valgrind-test-art-host-dex2oat-target: $(valgrindTARGET_CORE_IMG_OUTS)
 
diff --git a/dex2oat/dex2oat.cc b/dex2oat/dex2oat.cc
index 03679fa..ce6d81e 100644
--- a/dex2oat/dex2oat.cc
+++ b/dex2oat/dex2oat.cc
@@ -587,7 +587,7 @@ class Dex2Oat FINAL {
     bool generate_debug_info = kIsDebugBuild;
     bool watch_dog_enabled = true;
     bool abort_on_hard_verifier_error = false;
-    bool requested_specific_compiler = false;
+    //bool requested_specific_compiler = false;
 
     PassManagerOptions pass_manager_options;
 
@@ -695,7 +695,7 @@ class Dex2Oat FINAL {
           Usage("Error parsing '%s': %s", option.data(), error_msg.c_str());
         }
       } else if (option.starts_with("--compiler-backend=")) {
-        requested_specific_compiler = true;
+        //requested_specific_compiler = true;
         StringPiece backend_str = option.substr(strlen("--compiler-backend=")).data();
         if (backend_str == "Quick") {
           compiler_kind_ = Compiler::kQuick;
@@ -863,11 +863,7 @@ class Dex2Oat FINAL {
     #endif
 
     image_ = (!image_filename_.empty());
-    if (!requested_specific_compiler && !kUseOptimizingCompiler) {
-      // If no specific compiler is requested, the current behavior is
-      // to compile the boot image with Quick, and the rest with Optimizing.
-      compiler_kind_ = image_ ? Compiler::kQuick : Compiler::kOptimizing;
-    }
+    compiler_kind_ = Compiler::kOptimizing;
 
     if (compiler_kind_ == Compiler::kOptimizing) {
       // Optimizing only supports PIC mode.
@@ -999,26 +995,7 @@ class Dex2Oat FINAL {
     }
 
     CHECK(compiler_filter_string != nullptr);
-    CompilerOptions::CompilerFilter compiler_filter = CompilerOptions::kDefaultCompilerFilter;
-    if (strcmp(compiler_filter_string, "verify-none") == 0) {
-      compiler_filter = CompilerOptions::kVerifyNone;
-    } else if (strcmp(compiler_filter_string, "interpret-only") == 0) {
-      compiler_filter = CompilerOptions::kInterpretOnly;
-    } else if (strcmp(compiler_filter_string, "verify-at-runtime") == 0) {
-      compiler_filter = CompilerOptions::kVerifyAtRuntime;
-    } else if (strcmp(compiler_filter_string, "space") == 0) {
-      compiler_filter = CompilerOptions::kSpace;
-    } else if (strcmp(compiler_filter_string, "balanced") == 0) {
-      compiler_filter = CompilerOptions::kBalanced;
-    } else if (strcmp(compiler_filter_string, "speed") == 0) {
-      compiler_filter = CompilerOptions::kSpeed;
-    } else if (strcmp(compiler_filter_string, "everything") == 0) {
-      compiler_filter = CompilerOptions::kEverything;
-    } else if (strcmp(compiler_filter_string, "time") == 0) {
-      compiler_filter = CompilerOptions::kTime;
-    } else {
-      Usage("Unknown --compiler-filter value %s", compiler_filter_string);
-    }
+    CompilerOptions::CompilerFilter compiler_filter = CompilerOptions::kEverything;
 
     // It they are not set, use default values for inlining settings.
     // TODO: We should rethink the compiler filter. We mostly save
diff --git a/test/Android.run-test.mk b/test/Android.run-test.mk
index cf4c610..8e7b3df 100644
--- a/test/Android.run-test.mk
+++ b/test/Android.run-test.mk
@@ -464,11 +464,9 @@ endif
 
 # If ART_USE_OPTIMIZING_COMPILER is set to true, then the default core.art has been
 # compiled with the optimizing compiler.
-ifeq ($(ART_USE_OPTIMIZING_COMPILER),true)
-  ART_TEST_KNOWN_BROKEN += $(call all-run-test-names,$(TARGET_TYPES),$(RUN_TYPES),$(PREBUILD_TYPES), \
-      default,$(RELOCATE_TYPES),$(TRACE_TYPES),$(GC_TYPES),$(JNI_TYPES), \
-      $(IMAGE_TYPES),$(PICTEST_TYPES),$(DEBUGGABLE_TYPES),$(TEST_ART_BROKEN_OPTIMIZING_RUN_TESTS),$(ALL_ADDRESS_SIZES))
-endif
+ART_TEST_KNOWN_BROKEN += $(call all-run-test-names,$(TARGET_TYPES),$(RUN_TYPES),$(PREBUILD_TYPES), \
+    default,$(RELOCATE_TYPES),$(TRACE_TYPES),$(GC_TYPES),$(JNI_TYPES), \
+    $(IMAGE_TYPES),$(PICTEST_TYPES),$(DEBUGGABLE_TYPES),$(TEST_ART_BROKEN_OPTIMIZING_RUN_TESTS),$(ALL_ADDRESS_SIZES))
 
 TEST_ART_BROKEN_OPTIMIZING_RUN_TESTS :=
 
-- 
2.6.4

